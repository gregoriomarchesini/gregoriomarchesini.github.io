<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://gregoriomarchesini.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gregoriomarchesini.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-05T05:41:44+00:00</updated><id>https://gregoriomarchesini.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Tricks for faster MPC in Casadi</title><link href="https://gregoriomarchesini.github.io/blog/2025/to-function/" rel="alternate" type="text/html" title="Tricks for faster MPC in Casadi"/><published>2025-05-04T16:40:16+00:00</published><updated>2025-05-04T16:40:16+00:00</updated><id>https://gregoriomarchesini.github.io/blog/2025/to-function</id><content type="html" xml:base="https://gregoriomarchesini.github.io/blog/2025/to-function/"><![CDATA[<h1 id="running-faster-mpc">Running faster MPC</h1> <p>When dealing with nonlinear Model Predicive Control (MPC), there is often a question on how to make the code faster. I will consider the general purpose optimization library <code class="language-plaintext highlighter-rouge">casadi</code>.</p> <p>A few main key factors are essential to speed up your solution time.</p> <p>1) <strong>Warm-starting</strong> 2) <strong>Use <code class="language-plaintext highlighter-rouge">to_function()</code> to save your mpc controller</strong></p> <p>The process of warm staring consists on letting the solver save the previous solution as the initial guess for the next iteration. Indeed, in problems like MPC, where the same optimization problem is solved repeateadly for many iterations, it is critical to reuse as much computation as possible.</p> <p>On the other hand, the use of the method <code class="language-plaintext highlighter-rouge">to_function</code> from <code class="language-plaintext highlighter-rouge">Opti</code> is always suggested to speed0up your MPC code. We can have a look at an example</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/base_mpc.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><category term="mpc"/><summary type="html"><![CDATA[march & april, looking forward to summer]]></summary></entry></feed>